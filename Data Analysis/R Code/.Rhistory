# nrow(private_permits)
#
# # Urban/Rural
# table(private_permits$rural_urban)
#
# # Rural
# # mean duration
# private_permits %>%
#   filter(private_permits$rural_urban == 'Rural') %>%
#   summarise(., mean(duration))
#
# # mean cost
# private_permits %>%
#   filter(private_permits$rural_urban == 'Rural') %>%
#   filter(.$cost_estimate > 0) %>%
#   summarise(., mean(cost_estimate))
#
# # Urban
# # mean duration
# private_permits %>%
#   filter(private_permits$rural_urban == 'Urban') %>%
#   summarise(., mean(duration))
#
# # mean cost
# private_permits %>%
#   filter(private_permits$rural_urban == 'Urban') %>%
#   filter(.$cost_estimate > 0) %>%
#   summarise(., mean(cost_estimate))
#
#
# # Filed by PA
# table(private_permits$filed_by_pa)
#
# # yes
# # mean duration
# private_permits %>%
#   filter(private_permits$filed_by_pa == 'yes') %>%
#   summarise(., mean(duration))
#
# # mean cost
# private_permits %>%
#   filter(private_permits$filed_by_pa == 'yes') %>%
#   filter(.$cost_estimate > 0) %>%
#   summarise(., mean(cost_estimate))
#
# # no
# # mean duration
# private_permits %>%
#   filter(private_permits$filed_by_pa == 'no') %>%
#   summarise(., mean(duration))
#
# # mean cost
# private_permits %>%
#   filter(private_permits$filed_by_pa == 'no') %>%
#   filter(.$cost_estimate > 0) %>%
#   summarise(., mean(cost_estimate))
#
#
# # Corporate owner
# table(private_permits$corporate_owner)
#
# # yes (1)
# # mean duration
# private_permits %>%
#   filter(private_permits$corporate_owner == 1) %>%
#   summarise(., mean(duration))
#
# # mean cost
# private_permits %>%
#   filter(private_permits$corporate_owner == 1) %>%
#   filter(.$cost_estimate > 0) %>%
#   summarise(., mean(cost_estimate))
#
# # no (0)
# # mean duration
# private_permits %>%
#   filter(private_permits$corporate_owner == 0) %>%
#   summarise(., mean(duration))
#
# # mean cost
# private_permits %>%
#   filter(private_permits$corporate_owner == 0) %>%
#   filter(.$cost_estimate > 0) %>%
#   summarise(., mean(cost_estimate))
# generate table of descriptive statistics summarizing data
# using arsenal library
# narrow down relevant variables
permits <- permits_clean %>%
select(duration, cost_estimate, project_type, rural_urban, filed_by_pa, corporate_owner)
# convert binary corporate_owner to yes/no
permits$corporate_owner <- factor(ifelse(permits$corporate_owner, "Yes", "No"))
# make filed_by_pa column uppercase for formatting purposes
permits$filed_by_pa <- factor(permits$filed_by_pa, levels=c("no", "yes"), labels=c("No", "Yes"))
# filter out missing costs, negative durations
init = nrow(permits)
permits <- permits %>%
filter(.$cost_estimate > 0) %>%
filter(.$duration >= 0)
final = nrow(permits)
init - final
# 931 rows removed due to missing cost/negative duration
# summarize
permits_summary <- tableby( ~ ., data = permits)
labels <- list(
duration = "Approval Time (days)",
cost_estimate = "Estimated Cost ($)",
project_type = "Project Type",
rural_urban = "Rural/Urban",
filed_by_pa = "Filed by PA",
corporate_owner = "Corporate Owner"
)
summary(permits_summary, title = "Construction Permits Summary", labelTranslations = labels)
# CODE FOR PRIVATE ONLY ANALYSIS (Not used in final report)
# # remove public permits
# # (Private, Public w/ Private Contracting, Public-Private ALliance types remain)
# private_permits <- permits_clean %>%
#   filter(!permits_clean$project_type == "Public")
#
# # ? private permits
# nrow(private_permits)
#
# # Urban/Rural
# table(private_permits$rural_urban)
#
# # Rural
# # mean duration
# private_permits %>%
#   filter(private_permits$rural_urban == 'Rural') %>%
#   summarise(., mean(duration))
#
# # mean cost
# private_permits %>%
#   filter(private_permits$rural_urban == 'Rural') %>%
#   filter(.$cost_estimate > 0) %>%
#   summarise(., mean(cost_estimate))
#
# # Urban
# # mean duration
# private_permits %>%
#   filter(private_permits$rural_urban == 'Urban') %>%
#   summarise(., mean(duration))
#
# # mean cost
# private_permits %>%
#   filter(private_permits$rural_urban == 'Urban') %>%
#   filter(.$cost_estimate > 0) %>%
#   summarise(., mean(cost_estimate))
#
#
# # Filed by PA
# table(private_permits$filed_by_pa)
#
# # yes
# # mean duration
# private_permits %>%
#   filter(private_permits$filed_by_pa == 'yes') %>%
#   summarise(., mean(duration))
#
# # mean cost
# private_permits %>%
#   filter(private_permits$filed_by_pa == 'yes') %>%
#   filter(.$cost_estimate > 0) %>%
#   summarise(., mean(cost_estimate))
#
# # no
# # mean duration
# private_permits %>%
#   filter(private_permits$filed_by_pa == 'no') %>%
#   summarise(., mean(duration))
#
# # mean cost
# private_permits %>%
#   filter(private_permits$filed_by_pa == 'no') %>%
#   filter(.$cost_estimate > 0) %>%
#   summarise(., mean(cost_estimate))
#
#
# # Corporate owner
# table(private_permits$corporate_owner)
#
# # yes (1)
# # mean duration
# private_permits %>%
#   filter(private_permits$corporate_owner == 1) %>%
#   summarise(., mean(duration))
#
# # mean cost
# private_permits %>%
#   filter(private_permits$corporate_owner == 1) %>%
#   filter(.$cost_estimate > 0) %>%
#   summarise(., mean(cost_estimate))
#
# # no (0)
# # mean duration
# private_permits %>%
#   filter(private_permits$corporate_owner == 0) %>%
#   summarise(., mean(duration))
#
# # mean cost
# private_permits %>%
#   filter(private_permits$corporate_owner == 0) %>%
#   filter(.$cost_estimate > 0) %>%
#   summarise(., mean(cost_estimate))
# generate table of descriptive statistics summarizing data
# using arsenal library
# narrow down relevant variables
permits <- permits_clean %>%
select(duration, cost_estimate, project_type, rural_urban, filed_by_pa, corporate_owner)
# convert binary corporate_owner to yes/no
permits$corporate_owner <- factor(ifelse(permits$corporate_owner, "Yes", "No"))
# make filed_by_pa column uppercase for formatting purposes
permits$filed_by_pa <- factor(permits$filed_by_pa, levels=c("no", "yes"), labels=c("No", "Yes"))
# filter out missing costs, negative durations
init = nrow(permits)
permits <- permits %>%
filter(.$cost_estimate > 0) %>%
filter(.$duration >= 0)
final = nrow(permits)
init - final
# 931 rows removed due to missing cost/negative duration
# summarize
permits_summary <- tableby( ~ ., data = permits)
labels <- list(
duration = "Approval Time (days)",
cost_estimate = "Estimated Cost ($)",
project_type = "Project Type",
rural_urban = "Rural/Urban",
filed_by_pa = "Filed by PA",
corporate_owner = "Corporate Owner"
)
summary(permits_summary, title = "Construction Permits Summary", labelTranslations = labels)
# CODE FOR PRIVATE ONLY ANALYSIS (Not used in final report)
# # remove public permits
# # (Private, Public w/ Private Contracting, Public-Private ALliance types remain)
# private_permits <- permits_clean %>%
#   filter(!permits_clean$project_type == "Public")
#
# # ? private permits
# nrow(private_permits)
#
# # Urban/Rural
# table(private_permits$rural_urban)
#
# # Rural
# # mean duration
# private_permits %>%
#   filter(private_permits$rural_urban == 'Rural') %>%
#   summarise(., mean(duration))
#
# # mean cost
# private_permits %>%
#   filter(private_permits$rural_urban == 'Rural') %>%
#   filter(.$cost_estimate > 0) %>%
#   summarise(., mean(cost_estimate))
#
# # Urban
# # mean duration
# private_permits %>%
#   filter(private_permits$rural_urban == 'Urban') %>%
#   summarise(., mean(duration))
#
# # mean cost
# private_permits %>%
#   filter(private_permits$rural_urban == 'Urban') %>%
#   filter(.$cost_estimate > 0) %>%
#   summarise(., mean(cost_estimate))
#
#
# # Filed by PA
# table(private_permits$filed_by_pa)
#
# # yes
# # mean duration
# private_permits %>%
#   filter(private_permits$filed_by_pa == 'yes') %>%
#   summarise(., mean(duration))
#
# # mean cost
# private_permits %>%
#   filter(private_permits$filed_by_pa == 'yes') %>%
#   filter(.$cost_estimate > 0) %>%
#   summarise(., mean(cost_estimate))
#
# # no
# # mean duration
# private_permits %>%
#   filter(private_permits$filed_by_pa == 'no') %>%
#   summarise(., mean(duration))
#
# # mean cost
# private_permits %>%
#   filter(private_permits$filed_by_pa == 'no') %>%
#   filter(.$cost_estimate > 0) %>%
#   summarise(., mean(cost_estimate))
#
#
# # Corporate owner
# table(private_permits$corporate_owner)
#
# # yes (1)
# # mean duration
# private_permits %>%
#   filter(private_permits$corporate_owner == 1) %>%
#   summarise(., mean(duration))
#
# # mean cost
# private_permits %>%
#   filter(private_permits$corporate_owner == 1) %>%
#   filter(.$cost_estimate > 0) %>%
#   summarise(., mean(cost_estimate))
#
# # no (0)
# # mean duration
# private_permits %>%
#   filter(private_permits$corporate_owner == 0) %>%
#   summarise(., mean(duration))
#
# # mean cost
# private_permits %>%
#   filter(private_permits$corporate_owner == 0) %>%
#   filter(.$cost_estimate > 0) %>%
#   summarise(., mean(cost_estimate))
View(census_block_groups)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(sf)
library(arsenal)
library(ggplot2)
library(conflicted)
# resolve conflicts with base R packages
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
# import updated data
permits_raw <- read_excel("../Datasets/OGPE/Raw/OGPE_ConstructionPermits_UpdatedThroughNov23_Raw_ESP.xlsx")  %>%
as_tibble()
# View(permits_raw)
# write all private and private-related permit coordinates to csv file
# these will be used for mapping
# NOTE:
# spatial mapping code used: https://epsg.io/4437
# accurate to 2.0 m
# all private and private-related, approved permits since Hurricane Irma
private_coords <- permits_clean %>%
filter(.$approval_status == "PERMIT_APPROVED") %>% # only considering approved permits for map
filter(.$project_type != "Public") %>%
filter(.$filed_date > '2017-09-06') %>% # filed after Hurricane Irma hit on Sept 6, 2017
select(c('x', 'y'))
write_excel_csv(private_coords, '../Datasets/OGPE/Clean/Spatial Data/private_related_coordinates_post_irma_EPSG_4437.csv')
### INDIVIDUAL RECONSTRUCTION PERMITS
# private and private-related, approved permits 1 year after Irma/Maria
private_coords <- permits_clean %>%
filter(.$approval_status == "PERMIT_APPROVED") %>% # only considering approved permits for map
filter(.$project_type != "Public") %>%
filter(.$filed_date > '2017-09-06' & .$filed_date <= '2018-09-06') %>% # filed within 1 year Hurricane Irma hit on Sept 6, 2017 (includes Maria)
select(c('x', 'y'))
write_excel_csv(private_coords, '../Datasets/OGPE/Clean/Spatial Data/private_related_coordinates_1yr_post_irma_maria_EPSG_4437.csv')
# private and private-related, approved permits 1 year after 2020 Earthquakes
private_coords <- permits_clean %>%
filter(.$approval_status == "PERMIT_APPROVED") %>% # only considering approved permits for map
filter(.$project_type != "Public") %>%
filter(.$filed_date > '2020-01-07' & .$filed_date <= '2021-01-07') %>% # filed within 1 year after main earthquake hit on Jan 7, 2020
select(c('x', 'y'))
write_excel_csv(private_coords, '../Datasets/OGPE/Clean/Spatial Data/private_related_coordinates_1yr_post_earthquakes_EPSG_4437.csv')
# private and private-related, approved permits 1 year after Hurricane Fiona
private_coords <- permits_clean %>%
filter(.$approval_status == "PERMIT_APPROVED") %>% # only considering approved permits for map
filter(.$project_type != "Public") %>%
filter(.$filed_date > '2022-09-18' & .$filed_date <= '2023-09-18') %>% # filed within 1 year after Hurricane Fiona hit on Sept 18, 2022
select(c('x', 'y'))
write_excel_csv(private_coords, '../Datasets/OGPE/Clean/Spatial Data/private_related_coordinates_1yr_post_fiona_EPSG_4437.csv')
# features include cost, duration
# also want to keep rural_urban, project_type, and filed_by_pa variables for comparison
total_count = nrow(permits)
total_removed = 0
# grab necessary variables
permits <- permits_clean %>%
select(duration, cost_estimate, project_type, rural_urban, filed_by_pa, corporate_owner)
# convert binary corporate_owner to yes/no
permits$corporate_owner <- factor(ifelse(permits$corporate_owner, "Yes", "No"))
# make filed_by_pa column uppercase for formatting purposes
permits$filed_by_pa <- factor(permits$filed_by_pa, levels=c("no", "yes"), labels=c("No", "Yes"))
# filter out missing costs, negative durations
init = nrow(permits)
permits <- permits %>%
filter(.$cost_estimate > 0) %>%
filter(.$duration >= 0)
final = nrow(permits)
removed = init - final
total_removed = total_removed + removed
total_removed
# 931 rows removed due to missing cost/negative duration
# remove outliers (> $50 million cost, > 2000 duration)
init = nrow(permits)
permits <- permits %>%
filter(.$cost_estimate <= 50000000) %>%
filter(.$duration <= 2000)
final = nrow(permits)
removed = init - final
removed
total_removed = total_removed + removed
# 13 outliers removed
total_removed / total_count
# 5.81% of the dataset removed
# sample 50% of the remaining rows (without replacement)
permits <- sample_frac(permits, 0.50)
nrow(permits)
# 16248 rows plotted
# 50% of 94.19% -> 47.095% of rows plotted -> ~47.1%
# creates scatter plots based on 'category' variable
create_scatter_plot <- function(category, facet_var, legend_title) {
ggplot(permits) +
scale_y_continuous(labels = c(0, 10, 20, 30, 40)) +
geom_jitter(aes(x=duration, y=cost_estimate, color=category), shape=1, size=1) +
facet_wrap(facet_var) +
labs(title="Approval Time and Est. Cost of Construction Permits in Puerto Rico by Category", x="Approval Time (days)", y="Estimated Cost ($ millions)", color=legend_title)
}
# create scatter plots
# rural/urban:
create_scatter_plot(permits$rural_urban, ~permits$rural_urban, "Rural/Urban")
# project type:
create_scatter_plot(permits$project_type, ~permits$project_type, "Project Type")
# filed by pa:
create_scatter_plot(permits$filed_by_pa, ~permits$filed_by_pa, "Filed by PA")
# corporate owner:
create_scatter_plot(permits$corporate_owner, ~permits$corporate_owner, "Corporate Owner")
View(permits_clean)
summary(permits_clean$approval_status)
sum(permits_clean$approval_status)
sum(permits_clean$approval_status)
summary(permits_clean$approval_status)
unique(permits_clean$approval_status)
# write all private and private-related permit coordinates to csv file
# these will be used for mapping
# NOTE:
# spatial mapping code used: https://epsg.io/4437
# accurate to 2.0 m
unique(permits_clean$approval_status)
# all permits are either approved or pre-approved. So, no need to filter for approved only
# all private and private-related, approved permits since Hurricane Irma
private_coords <- permits_clean %>%
filter(.$project_type != "Public") %>%
filter(.$filed_date > '2017-09-06') %>% # filed after Hurricane Irma hit on Sept 6, 2017
select(c('x', 'y'))
write_excel_csv(private_coords, '../Datasets/OGPE/Clean/Spatial Data/private_related_coordinates_post_irma_EPSG_4437.csv')
### INDIVIDUAL RECONSTRUCTION PERMITS
# private and private-related, approved permits 1 year after Irma/Maria
private_coords <- permits_clean %>%
filter(.$project_type != "Public") %>%
filter(.$filed_date > '2017-09-06' & .$filed_date <= '2018-09-06') %>% # filed within 1 year Hurricane Irma hit on Sept 6, 2017 (includes Maria)
select(c('x', 'y'))
write_excel_csv(private_coords, '../Datasets/OGPE/Clean/Spatial Data/private_related_coordinates_1yr_post_irma_maria_EPSG_4437.csv')
# private and private-related, approved permits 1 year after 2020 Earthquakes
private_coords <- permits_clean %>%
filter(.$project_type != "Public") %>%
filter(.$filed_date > '2020-01-07' & .$filed_date <= '2021-01-07') %>% # filed within 1 year after main earthquake hit on Jan 7, 2020
select(c('x', 'y'))
write_excel_csv(private_coords, '../Datasets/OGPE/Clean/Spatial Data/private_related_coordinates_1yr_post_earthquakes_EPSG_4437.csv')
# private and private-related, approved permits 1 year after Hurricane Fiona
private_coords <- permits_clean %>%
filter(.$project_type != "Public") %>%
filter(.$filed_date > '2022-09-18' & .$filed_date <= '2023-09-18') %>% # filed within 1 year after Hurricane Fiona hit on Sept 18, 2022
select(c('x', 'y'))
write_excel_csv(private_coords, '../Datasets/OGPE/Clean/Spatial Data/private_related_coordinates_1yr_post_fiona_EPSG_4437.csv')
### Clean data
# remove duplicate rows
init_row_num <- nrow(permits_clean)
permits_clean <- permits_clean %>%
distinct(.keep_all = TRUE)
final_row_num <- nrow(permits_clean)
init_row_num == final_row_num # TRUE, no duplicates removed
# check for duplicates based on case
init_row_num <- nrow(permits_clean)
permits_clean <- permits_clean %>%
distinct(case, .keep_all = TRUE)
final_row_num <- nrow(permits_clean)
init_row_num == final_row_num # TRUE, no duplicates removed
# check for rows where case # is different but everything else is the same
init_row_num <- nrow(permits_clean)
permits_clean <- permits_clean[!(duplicated(permits_clean[-1]) | duplicated(permits_clean[-1], fromLast = TRUE)),]
final_row_num <- nrow(permits_clean)
init_row_num == final_row_num # FALSE, duplicates removed
init_row_num - final_row_num # 64 duplicates found
# 64 duplicate rows removed
# Note: we don't check for duplicate location, because multiple projects/permits could have occurred at the same address/building
###
# Check for missing values
# Let's deal with missing values first
summary(permits_clean) # see where missing values (NA) exist
# 178 NAs in lon and lat
# Check that missing lons/lats occur on the same rows
which(!which(is.na(permits_clean$lon))==which(is.na(permits_clean$lat)))
# Yes, they occur on the same rows (no FALSE entries)
# Because all entries have x/y spatial coordinates, we will map permits using these instead.
###
# Next let's look at impossible values for cost
# hist(permits_clean$cost_estimate)
filter(permits_clean, cost_estimate <= 0)
# 921 rows are missing cost (cost_estimate <= 0)
# we will replace all of these values with 0 to denote missing cost
permits_clean$cost_estimate <- replace(permits_clean$cost_estimate, permits_clean$cost_estimate < 0, 0)
filter(permits_clean, cost_estimate == 0) # check that it worked
###
# Next map locations to Census Block Group level (generate FIPS codes)
# Convert x/y Cartesian coordinates to sf format (sf library)
# spatial mapping code used: https://epsg.io/4437
# accurate to 2.0 m
spatial_coords <- st_as_sf(permits_clean, coords=c('x', 'y'), crs='EPSG:4437')[c('geometry')]
# Now convert x/y spatial coordinates to FIPS codes down to the Census Block level
# tutorial: https://shiandy.com/post/2020/11/02/mapping-lat-long-to-fips/
# census data source: https://catalog.data.gov/dataset/tiger-line-shapefile-current-state-puerto-rico-block-group
census_block_groups <- st_read('../Datasets/Census/2020/tl_2023_72_tabblock20/tl_2023_72_tabblock20.shp', quiet=TRUE)
